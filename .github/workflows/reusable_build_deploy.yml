name: Reusable NixOS build and deploy workflow

# For documentation about the failure() condition, see
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idneeds

on:
  workflow_call:
    inputs:
      push_secrets:
        required: true
        type: boolean
        description: |-
          Whether generated secrets should be pushed back to the branch.
          This should be set to true when running the actions from a PR
          and when the secrets should be regenerated.
          Set to false otherwise to avoid an infinite loop where this action
          keeps on retriggering itself.
      push_robot_keys:
        required: true
        type: boolean
        description: |-
          Whether the public SSH keys for the GitHub robot user should be
          updated.
          Set to true when running from the master branch only.
      nix_path:
        required: false
        default: |-
          nixpkgs=https://nix-channel-redirect.ocb.msf.org/nixexprs.tar.xz
        type: string
        description: |-
          The nix channel to set when installing Nix.
      main_repo:
        required: false
        default: "MSF-OCB/NixOS"
        type: string
        description: |-
          The main repo containing the NixOS config.
      org_repo:
        required: false
        default: "MSF-OCB/NixOS-OCB-config"
        type: string
        description: |-
          The repo containing the organisation-specific NixOS config.
      cachix_cache:
        required: false
        default: "msf-ocb"
        type: string
        description: |-
          The Cachix cache to use.
          See https://www.cachix.org/
          This is fully optional, but it can save time if we can download
          things like our python package without needing to rebuild it locally.

    secrets:
      # NOTE: deploy keys are SSH keys that can be used to give access to a
      #       particular GitHub repo. They can be either RO or RW.
      #       The standard GitHub token that is used when we do not configure
      #       authentication explicitly, has some limitations (it can only access
      #       the current repo, it does not retrigger an action when new commits
      #       are pushed). We use deploy keys to avoid these limitations.
      #       Deploy keys can be created with
      #         ssh-keygen -N "" -C "" -t ed25519
      #       and added to a repo from the repo's settings page on GitHub.
      NIXOS_OCB_CONFIG_DEPLOY_KEY:
        required: true
        description: |-
          The deploy key used to check out the org repo (read-only).
      NIXOS_OCB_SECRETS_COMMIT_DEPLOY_KEY:
        required: true
        description: |-
          The deploy key used to commit the generated secrets back to the
          org repo, this one needs to be read-write if the push_secrets input
          is set to true.
      NIXOS_OCB_KEY_MGMT_API_TOKEN:
        required: true
        description: |-
          API token that gives access to the GitHub API to manage the public SSH
          keys for the robot GitHub user.
          This is a PAT belonging to the user to which the public keys should be
          added.
      NIXOS_ROBOT_KEY:
        required: true
        description: |-
          Private SSH key for the robot user, corresponding to the public key
          defined for this user in the org repo
          (the entry for robot in json/keys.json).
      NIXOS_SECRET_MANAGEMENT_VAULT_KEY:
        required: true
        description: |-
          The vault key with which the secret files have been encrypted.
      NIXOS_CACHIX_AUTH_KEY:
        required: true
        description: |-
          The auth key for the cachix cache, see above.


jobs:

  log_inputs:
    runs-on: "ubuntu-latest"
    steps:
      - name: Log inputs
        run: |-
          echo "push_secrets: ${{ inputs.push_secrets }}"
          echo "push_robot_keys: ${{ inputs.push_robot_keys }}"


  # Since this is the first job to build the pythontools packages,
  # we add an auth key to the cachix action to upload the package to cachix.
  # All other jobs needing the pythontools package should depend on this one.
  encrypt_secrets:
    runs-on: "ubuntu-latest"
    outputs:
      secrets_pushed_outcome: ${{ steps.commit_push_step.outcome }}
    steps:
      - name: Checkout the main repo
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.main_repo }}"
          persist-credentials: false

      # By default, when running on a PR, the checkout action will checkout
      # a detached HEAD. In order to be able to commit and push, we make sure
      # that we checkout the actual PR branch when we are going to push the secrets.
      - name: Checkout the org repo (PR branch)
        id: checkout_pr_with_ref
        if: >-
          github.event_name == 'pull_request' &&
          inputs.push_secrets
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.org_repo }}"
          path: "org-config"
          ref: "${{ github.event.pull_request.head.ref }}"
          # Do not use the default GITHUB_TOKEN for authentication,
          # See: https://docs.github.com/en/actions/reference/authentication-in-a-workflow#using-the-github_token-in-a-workflow
          # This makes sure that the action gets retriggered after committing
          # the generated secrets, which is required for the PR validation.
          ssh-key: "${{ secrets.NIXOS_OCB_SECRETS_COMMIT_DEPLOY_KEY }}"

      - name: Checkout the org repo (detached HEAD)
        if: steps.checkout_pr_with_ref.outcome == 'skipped'
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.org_repo }}"
          path: "org-config"
          ssh-key: "${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}"
          persist-credentials: false

      - name: Install the Nix package manager
        uses: cachix/install-nix-action@master
        with:
          nix_path: "${{ inputs.nix_path }}"

      - name: Configure the Cachix cache
        uses: "cachix/cachix-action@master"
        with:
          name: "${{ inputs.cachix_cache }}"
          authToken: "${{ secrets.NIXOS_CACHIX_AUTH_KEY }}"
          pushFilter: |-
            (-source$|nixpkgs\.tar\.gz$)
        continue-on-error: true

      - name: Clear the old generated secrets files
        run: rm "org-config/secrets/generated/generated-secrets.yml"

      - name: Generate the new generated secrets files
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "encrypt_server_secrets
          --ansible_vault_passwd '${{ secrets.NIXOS_SECRET_MANAGEMENT_VAULT_KEY }}'
          --output_path          './org-config/secrets/generated/generated-secrets.yml'
          --secrets_directory    './org-config/secrets/'
          --tunnel_config_path   './org-config/json/tunnels.d/'"

      - name: Commit and push the new generated secrets files
        # Only rerun this step if the master secrets have changed, but the auto-commit
        # is not the last commit of this PR, as checked by the check_secrets_ok job.
        # This avoids an infinite loop where the secrets keep on being regenerated.
        if: >-
          github.event_name == 'pull_request' &&
          inputs.push_secrets
        id: commit_push_step
        uses: "EndBug/add-and-commit@v9"
        with:
          cwd: "org-config"
          add: "secrets/generated/*"
          message: |
            Commit newly generated secrets (GitHub Action: ${{ github.workflow }}).
          default_author: github_actions
          push: true


  update_nixos_robot_keys:
    runs-on: "ubuntu-latest"
    needs:
      - encrypt_secrets
    if: needs.encrypt_secrets.outputs.secrets_pushed_outcome == 'skipped'
    steps:
      - name: Checkout the main repo
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.main_repo }}"
          persist-credentials: false

      - name: Checkout the org repo
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.org_repo }}"
          path: "org-config"
          ssh-key: "${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}"
          persist-credentials: false

      - name: Install the Nix package manager
        uses: "cachix/install-nix-action@master"
        with:
          nix_path: "${{ inputs.nix_path }}"

      - name: Configure the Cachix cache
        uses: "cachix/cachix-action@master"
        with:
          name: "${{ inputs.cachix_cache }}"
        continue-on-error: true

      - name: Update the NixOS Robot SSH keys
        id: do_update_keys
        if: >-
          inputs.push_robot_keys &&
          ( github.event_name == 'push' ||
            github.event_name == 'workflow_dispatch' ) &&
          github.ref == 'refs/heads/master'
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "update_nixos_keys
          --api_token ${{ secrets.NIXOS_OCB_KEY_MGMT_API_TOKEN }}
          --nixos_config_dir   './org-config'
          --tunnel_config_path './org-config/json/tunnels.d/'"

      - name: Update the NixOS Robot SSH keys (dry run)
        if: steps.do_update_keys.outcome == 'skipped'
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "update_nixos_keys
          --api_token ${{ secrets.NIXOS_OCB_KEY_MGMT_API_TOKEN }}
          --nixos_config_dir   './org-config'
          --tunnel_config_path './org-config/json/tunnels.d/'
          --dry_run"


  build:
    name: "build"
    runs-on: "ubuntu-latest"
    needs:
      - encrypt_secrets
    # Only run this step if no new secrets were pushed,
    # otherwise the action will be retriggered anyway.
    if: needs.encrypt_secrets.outputs.secrets_pushed_outcome == 'skipped'
    strategy:
      matrix:
        # When changing these settings, you need to change as well
        # the required checks in the branch protection policy on GitHub !!
        group_count: [ 5 ]
        group_id: [ 0, 1, 2, 3, 4 ]
    steps:
      - name: Checkout the main repo
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.main_repo }}"
          persist-credentials: false

      - name: Checkout the org repo
        uses: "actions/checkout@v3"
        with:
          repository: "${{ inputs.org_repo }}"
          path: "org-config"
          ssh-key: "${{ secrets.NIXOS_OCB_CONFIG_DEPLOY_KEY }}"
          persist-credentials: false

      - name: Install the Nix package manager
        uses: "cachix/install-nix-action@master"
        with:
          nix_path: "${{ inputs.nix_path }}"

      - name: Configure the Cachix cache
        uses: "cachix/cachix-action@master"
        with:
          name: "${{ inputs.cachix_cache }}"
        continue-on-error: true

      - name: Build the NixOS configurations
        run: >-
          nix-shell ./scripts/python_nixostools/shell.nix --run
          "build_nixos_configs
          --group_amount ${{ matrix.group_count }}
          --group_id ${{ matrix.group_id }}"


  deploy:
    runs-on: "ubuntu-latest"
    needs:
      - build
      - update_nixos_robot_keys
    # We only want to deploy when commits have been pushed to master
    if: >-
      ( github.event_name == 'push' ||
        github.event_name == 'workflow_dispatch' ) &&
      github.ref == 'refs/heads/master'
    steps:
      - name: Auto-deploy the NixOS config to the requested servers
        uses: "MSF-OCB/NixOS-deploy@master"
        with:
          nixos_robot_key: "${{ secrets.NIXOS_ROBOT_KEY }}"
          nixos_deploy_fixed_hosts: >-
            sshrelay1.ocb.msf.org
            sshrelay2.ocb.msf.org
            sshrelay-za-1.ocb.msf.org
          nixos_deploy_service: "nixos_rebuild_config.service"

